# 2023-05-18, J. Köppern

# %%
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from fit_poly_functions import *
import streamlit as st
import seaborn as sns

# Parameters
raw_data_filename ="./data_raw.csv"

window_size = 10

## streamlit
streamlit_texts = {
    "app_title":"Fit polynomial into data 💻☁️",
    "app_text":"""- This Streamlit application is hosted on Microsoft Azure. 
- Its source code is located in a GitHub repository.
- As part of the build pipeline, changes in the repository are automatically applied by Azure and the application is updated.
- An SSL certificate has been deposited with Azure for this web application so that it shows up as *secure* in the user's browser.
- Data is uploaded in a CSV file. They have the columns x and y.
- Outliers are first removed from the data according to the [Interquartile range](https://en.wikipedia.org/wiki/Interquartile_range):
  - WINDOW
  - QANTIL
  - LESS THAN FACTOR
- As an alternative to uploading a CSV file, synthetic data can be generated by the application.
- DEGREE
- PLOT"""
}

if "df" not in st.session_state:
    st.session_state.df = pd.DataFrame()

if "df_cleaned" not in st.session_state:
    st.session_state.df_cleaned = pd.DataFrame()

st.title(streamlit_texts ["app_title"])

st.markdown(streamlit_texts ["app_text"])

# Load/create df
st.header("Load/create data")

col1, col2 = st.columns(2)

with col1:
    load_button = st.button("Load")
    
    if load_button:
        st.write("Load button clicked!")

with col2:
    create_button = st.button("Create")
    
    if create_button:
        st.session_state.df = create_data(raw_data_filename, plot=False)

st.dataframe(st.session_state.df)

if len(st.session_state.df.columns) > 0:
    # Create scatter plot
    fig = plt.figure()

    sns.scatterplot(
        data=st.session_state.df,
        x = "x", 
        y= "y")

    # Set title and labels
    plt.title("Raw data")
    plt.xlabel("x")
    plt.ylabel("y")

    plt.grid(True)

    st.pyplot(fig)

# Remove outliers
st.header("Remove outliers")

clean_up = st.button("Rmove outliers")

if clean_up:
    st.session_state.df_cleaned = process_data_in_windows(
        st.session_state.df, 
        "y",
        window_size,
        plot=False)
    
    fig = plt.figure()

    if len(st.session_state.df_cleaned.columns) > 0:
        sns.scatterplot(
            data=st.session_state.df_cleaned,
            x = "x", 
            y= "y")

    # Set title and labels
    plt.title("Raw data")
    plt.xlabel("x")
    plt.ylabel("y")

    plt.grid(True)

    st.pyplot(fig)



# df_poly = fit_poly(df_cleaned, plot=False)



# %%
